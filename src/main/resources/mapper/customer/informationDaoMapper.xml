<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.group8.dao.customer.InformationDao">

	<select id="getTelephoneByUserName" parameterType="String" resultType="customer">

        select * from tb_user where username=#{userName}
    </select>
	<select id="getRealNameByUserId" parameterType="Integer" resultType="map">
        select b.* from tb_user a join tb_realname b on a.userid=b.userid where b.userid=#{userId}
    </select>

	<select id="getAuditorStatus" parameterType="Integer" resultType="map">
        select item from tb_systemcategoryitem where id=#{audutorId}
    </select>

	<select id="getEducation" resultType="map">
      select * from tb_systemcategoryitem where parentid=1
    </select>
	<select id="getMarriage" resultType="map">
        select * from tb_systemcategoryitem where parentid=3
    </select>
	<select id="getAddress" resultType="map">
        select * from tb_systemcategoryitem where parentid=2
    </select>
	<select id="getIncome" resultType="map">
        select * from tb_systemcategoryitem where parentid=4
    </select>


	<insert id="SubmissionRealName" parameterType="map">
  insert into tb_realname (id,userid,realname,sex,address,idnumber,academic,marriage,income,auditorid,housed,POSITIVE,OPPOSITE,JOB,APPLICATIONTIME)
   values(seq_realname_id.nextval,#{userId},#{realName},#{sex},#{address},#{idNumber},#{education},#{marriage},#{income},21,#{housed},#{positive},#{opposite},#{job},sysdate)
    </insert>

	<select id="getRealIdByUserName" resultType="map">
        select b.* from tb_user a join tb_realname b on a.userid=b.userid where a.username=#{userName}
    </select>


	<update id="updateHeadPortrait" parameterType="map">
        update tb_user set headportrait=#{filePath,jdbcType=VARCHAR} where username = #{userName,jdbcType=VARCHAR}
    </update>


	<select id="selectHeadPortrait" parameterType="String" resultType="map">
        select HEADPORTRAIT from tb_user where username= #{userName}
    </select>


	<update id="rechargeAmount" parameterType="map">
        update  tb_realname set BALANCE = BALANCE +#{money} where userid= #{userId}
    </update>


	<insert id="rechargeAmountRecords" parameterType="moneyRecords">
        insert into tb_moneyrecords values (#{userId},#{records},#{type},sysdate,#{thing})
    </insert>


	<select id="isRealName" resultType="map">

    select a.AUDITORID from TB_REALNAME a
    join tb_user b on a.userid=b.userid
    where  b.username=#{customerName}
    </select>

	<select id="realNameAllInfo" resultType="map">
		select REALNAME,SEX,job,POSITIVE,OPPOSITE,IDNUMBER,b.item ACADEMIC,c.item HOUSED,d.item MARRIAGE,e.item INCOME,substr(ADDRESS,1,instr(ADDRESS, ',',1)-1) province,
		substr(substr(ADDRESS,1,instr(ADDRESS, ',',-1,2)-1),instr(substr(ADDRESS,1,instr(ADDRESS, ',',-1,2)-1), ',',-1)+1) city,
		substr(substr(ADDRESS,1,instr(ADDRESS, ',',-1)-1),instr(substr(ADDRESS,1,instr(ADDRESS, ',',-1)-1), ',',-1)+1) area,
		substr(ADDRESS,instr(ADDRESS, ',',-1)+1) address
		from TB_REALNAME a
		join TB_SYSTEMCATEGORYITEM b on a.ACADEMIC = b.id
		join TB_SYSTEMCATEGORYITEM c on a.HOUSED = c.id
		join TB_SYSTEMCATEGORYITEM d on a.MARRIAGE = d.id
		join TB_SYSTEMCATEGORYITEM e on a.INCOME = e.id
		join TB_USER f on a.userid=f.userid
		where f.username=#{customerName}
	</select>

	<delete id="removeRealName">

		delete from TB_REALNAME where userid = (select userid from tb_user where username = #{username})
	</delete>
	<select id="getIdNumEmail" resultType="map">

		SELECT
			a.EMAIL,
			b.IDNUMBER,
			b.AUDITORID
		FROM
			tb_user a
			LEFT JOIN tb_realname b ON a.userid = b.userid
		WHERE
			a.username=#{username}
	</select>
	<select id="deleteRealNameIsNo" resultType="Integer">
      DELETE from tb_realname where userid=#{userId}
</select>

	<update id="updateNickName">
        update tb_user set  nickname=#{nickName} where userid= #{userId}
    </update>

	<select id="getPrincipalAndInterestToBeCollected" resultType="Integer">
       select sum(a.money*(d.item*0.01)+a.money) principalAndInteres from tb_investmentlist a
		join  tb_tendering b on a.tendid=b.id
		join tb_loanrecord c on b.id=c.tendid
		join tb_systemcategoryitem d on c.longtime=d.id

		join tb_realname e on a.realid=e.id
		join tb_user f on e.userid=f.userid
		 where f.userid=#{userId} and c.stuts=1
join tb_realname e on a.realid=e.id
join tb_user f on e.userid=f.userid
 where f.userid=#{userId} and /*c.stuts=1*/ c.state=1
    </select>


	<select id="getBalanceByUserId" resultType="Integer">
        select b.balance from tb_user a
	join tb_realname b on a.userid=b.userid where a.userid=#{userId}
    </select>

	<select id="getAccumulatedIncome" resultType="Integer">
		 select sum(a.money*(d.item*0.01)) accumulatedIncome from tb_investmentlist a
		join  tb_tendering b on a.tendid=b.id
		join tb_loanrecord c on b.id=c.tendid
		join tb_systemcategoryitem d on c.longtime=d.id

		join tb_realname e on a.realid=e.id
		join tb_user f on e.userid=f.userid
		 where f.userid=#{userId} and c.stuts=3
    </select>
	<select id="getProgress" resultType="map">

		select NVL((select round((select sum(money) from TB_INVESTMENTLIST where TENDID=d.id)/(select money from TB_BORROW
		where id=a.id)*100,1) from dual),0) jin
		from TB_BORROW a
		join TB_REALNAME b on a.REALID=b.id
		join TB_TENDERING d on a.id=d.borrow
		where d.id=#{tendid}

	</select>

    <select id="getAmountInInvestment" resultType="Integer">
 select a.money,g.state,k.userid
        from tb_investmentlist a
        join tb_tendering b on a.tendid=b.id
        left join tb_borrow c on b.borrow=c.id
        left join tb_loanrecord g on g.tendid=b.id
        left join TB_REALNAME h on a.REALID=h.id
        join tb_user k on h.userid=k.userid
		where k.userid=#{userId} and b.stuts=48 or b.stuts=5
    </select>
</mapper>